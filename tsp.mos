(!*******************************************************************
  * Asssignment 3                                                   *
  * ======================                                          *
  *                                                                 *
  * file tsp.mos                                                    *
  * ````````````````````                                            *
  * Find the shortest tour around the island of Ireland. Passing    *
  * through the capital town/city of every county.                  *
  *                                                                 *
  * Authors: Robert Creagh, Max Buckley                             *
  * Student Numbers: 15200115, 15203431                             *
  *                                                                 *
  * Subtour elimination code based on gamesworld.org, link:         *
  * http://www.gamsworld.org/performance/xpresslib/raw/ive/tsp.mos  *
  *								    *
  * print status procedure reused from                              *
  * potter_goal_preempt.mos by P.Carroll.                           *
  *******************************************************************!)

model "All Ireland tour planning"
 uses "mmxprs"

 forward procedure break_subtour
 forward procedure print_sol
 forward procedure print_status

 declarations
  ! Need to declare and initalize N_COUNTIES first so as to be able to initalize
  ! variable length arrays below.
  N_COUNTIES: integer ! Number of counties.
 end-declarations

 FILENAME := 'ireland_33.dat' ! This is our data file name.

 initializations from FILENAME
  N_COUNTIES
 end-initializations

 ! Main declarations section
 declarations
  COUNTIES = 1..N_COUNTIES ! County Indicies.
  DIST_MATRIX : array(COUNTIES, COUNTIES) of real ! Distance between counties.
  NEXT_COUNTY : array(COUNTIES) of integer ! Next county in the solution.
  ALL_COUNTIES: set of integer ! Set to check if county has been visited.
  TOWN_NAMES: array(COUNTIES) of string ! Array of town names.
  FLY : array(COUNTIES, COUNTIES) of mpvar ! 1 if flight from i to j.
  TOTAL_DIST : linctr ! Total distance of TSP solution.
  SUBTOURS_ELIMINATED: integer
end-declarations
  
  SUBTOURS_ELIMINATED:= 0

 ! Main initializations section
 initializations from FILENAME
  DIST_MATRIX ! Matrix of distances between towns.
  TOWN_NAMES ! Names of towns.
 end-initializations

 ! Procedures

 ! Procedure to check problem status.
 ! Procedure copied from potter_goal_preempt.mos by P. Carroll.
  procedure print_status
    declarations
    status: string
    end-declarations
    case getprobstat of
    XPRS_OPT: status:="LP Optimum found"
    XPRS_UNF: status:="Unfinished"
    XPRS_INF: status:="Infeasible"
    XPRS_UNB: status:="Unbounded"
    XPRS_OTH: status:="Failed"
    else status:="???"
    end-case
    writeln("Problem status: ", status)
  end-procedure

 ! Procedure to print the solution.
procedure print_sol
  writeln("Total distance: ", getobjval, " km") ! Print total distance
  ALL_COUNTIES := {}
  forall(i in COUNTIES) do
   if(i not in ALL_COUNTIES) then
    write(TOWN_NAMES(i)) ! Write initial town name.
    first := i
    repeat
     ALL_COUNTIES += {first}
     write(" - ", TOWN_NAMES(NEXT_COUNTY(first))) ! Write next town name.
     first := NEXT_COUNTY(first)
    until first = i
    writeln
   end-if
  end-do
 end-procedure

 ! Procedure to add constraints when subtours detected.
 procedure break_subtour
  declarations
   TOUR, SMALLEST, ALL_COUNTIES: set of integer
  end-declarations

  forall(i in COUNTIES)
   NEXT_COUNTY(i) := integer(round(getsol(sum(j in COUNTIES) j * FLY(i, j))))

  ! Print the current solution
  print_sol
  SUBTOURS_ELIMINATED := SUBTOURS_ELIMINATED + 1 ! Add 1 to subtour count.
 
  ! Get (sub)tour containing county 1
  TOUR := {}
  first := 1
  repeat
   TOUR += {first}
   first := NEXT_COUNTY(first)
  until first = 1
  size := getsize(TOUR)

  ! Find smallest subtour, in order to add the minimum number of constraints.
  if size < N_COUNTIES then
   SMALLEST := TOUR
   if size > 2 then
    ALL_COUNTIES:=TOUR
    forall(i in COUNTIES) do
     if(i not in ALL_COUNTIES) then
      TOUR := {}
      first := i
      repeat
       TOUR += {first}
       first := NEXT_COUNTY(first)
      until first = i
      ALL_COUNTIES += TOUR
      if getsize(TOUR) < size then
       SMALLEST := TOUR
       size := getsize(SMALLEST)
      end-if
      if size = 2 then
       break
      end-if
     end-if
    end-do
   end-if

  ! Add a subtour breaking constraint
  sum(i in SMALLEST) FLY(i, NEXT_COUNTY(i)) <= getsize(SMALLEST) - 1

   ! Re-solve the problem
   minimize(TOTAL_DIST)

   break_subtour
  end-if
 end-procedure

! End procedures

 forall(i, j in COUNTIES | i < j) DIST_MATRIX(j, i) := DIST_MATRIX(i, j)

 ! Objective: total distance
 TOTAL_DIST := sum(i, j in COUNTIES | i <> j) DIST_MATRIX(i, j) * FLY(i, j)

 ! Visit every county once
 forall(i in COUNTIES) OneVisitI(i) := sum(j in COUNTIES | i <> j) FLY(i, j) = 1
 forall(j in COUNTIES) OneVisitJ(j) := sum(i in COUNTIES | i <> j) FLY(i, j) = 1

 forall(i, j in COUNTIES | i <> j) FLY(i, j) is_binary

 ! Solve the problem
 minimize(TOTAL_DIST)

 ! Eliminate subtours
 break_subtour

 ! Print status
 print_status

 writeln("Number of Subtours eliminated: ", SUBTOURS_ELIMINATED)

end-model
