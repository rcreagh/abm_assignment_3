(!*******************************************************************
  * Assignment 3                                                    *
  * ======================                                          *
  *                                                                 *
  * file tsp.mos                                                    *
  * ````````````````````                                            *
  * Find the shortest TSP path between the capital town/county of     *
  * each of the counties of Ireland and Northern Ireland.           *
  *                                                                 *
  * Authors: Robert Creagh, Max Buckley                             *
  * Student Numbers: 15200115, 15203431                             *
  *                                                                 *
  * Code reused and edited from gamesworld.org, link:               *
  * http://www.gamsworld.org/performance/xpresslib/raw/ive/tsp.mos  *
  *								    * 
  *******************************************************************!)

model "Tour planning"
 uses "mmxprs"

 forward procedure break_subtour
 forward procedure print_sol

 declarations
  NCOUNTIES = 5
  COUNTIES = 1..NCOUNTIES                    ! Counties
  
  DIST: array(COUNTIES,COUNTIES) of integer  ! Distance between counties
  NEXTC: array(COUNTIES) of integer        ! Next county after i in the solution
 
  fly: array(COUNTIES,COUNTIES) of mpvar     ! 1 if flight from i to j 
 end-declarations

 initializations from 'tsp.dat'
  DIST
 end-initializations

 forall(i,j in COUNTIES | i<j) DIST(j,i):=DIST(i,j)

! Objective: total distance
 TotalDist:= sum(i,j in COUNTIES | i<>j) DIST(i,j)*fly(i,j)

! Visit every county once
 forall(i in COUNTIES) OneVisitI(i):= sum(j in COUNTIES | i<>j) fly(i,j) = 1
 forall(j in COUNTIES) OneVisitJ(j):= sum(i in COUNTIES | i<>j) fly(i,j) = 1

 forall(i,j in COUNTIES | i<>j) fly(i,j) is_binary

! Solve the problem
 minimize(TotalDist)

writeln(DIST)
! Eliminate subtours
 break_subtour

!-----------------------------------------------------------------

 procedure break_subtour
  declarations
   TOUR,SMALLEST,ALLCOUNTIES: set of integer
  end-declarations

  forall(i in COUNTIES) 
   NEXTC(i):= integer(round(getsol(sum(j in COUNTIES) j*fly(i,j) )))

! Print the current solution  
  print_sol
  
! Get (sub)tour containing county 1
  TOUR:={}
  first:=1
  repeat
   TOUR+={first}
   first:=NEXTC(first)
  until first=1
  size:=getsize(TOUR)
 
! Find smallest subtour
  if size < NCOUNTIES then
   SMALLEST:=TOUR
   if size>2 then
    ALLCOUNTIES:=TOUR 
    forall(i in COUNTIES) do
     if(i not in ALLCOUNTIES) then
      TOUR:={}
      first:=i
      repeat
       TOUR+={first}
       first:=NEXTC(first)
      until first=i
      ALLCOUNTIES+=TOUR
      if getsize(TOUR)<size then
       SMALLEST:=TOUR
       size:=getsize(SMALLEST)
      end-if
      if size=2 then
       break
      end-if 
     end-if 
    end-do        
   end-if
    
! Add a subtour breaking constraint
  sum(i in SMALLEST) fly(i,NEXTC(i)) <= getsize(SMALLEST) - 1
  
! Re-solve the problem
   minimize(TotalDist)

   break_subtour
  end-if 
 end-procedure
 
!-----------------------------------------------------------------

! Print the current solution
 procedure print_sol
  declarations
   ALLCOUNTIES: set of integer
  end-declarations
   
  writeln("Total distance: ", getobjval)
  ALLCOUNTIES:={}
  forall(i in COUNTIES) do
   if(i not in ALLCOUNTIES) then
    write(i)
    first:=i
    repeat
     ALLCOUNTIES+={first}
     write(" - ", NEXTC(first))
     first:=NEXTC(first)
    until first=i
    writeln 
   end-if
  end-do        
 end-procedure

end-model
